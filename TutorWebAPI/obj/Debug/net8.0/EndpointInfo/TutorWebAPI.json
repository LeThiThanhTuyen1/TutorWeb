{
  "openapi": "3.0.1",
  "info": {
    "title": "TutorWebAPI",
    "version": "1.0"
  },
  "paths": {
    "/api/Admin/dashboard": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get admin dashboard data",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/users": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get all users with pagination",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Add new user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Delete users by IDs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/users/{id}": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Update user by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/check-image": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Check NSFW image",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ImageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registers a new user and sends an email verification code.",
        "requestBody": {
          "description": "Contains registration information like email, password, and user details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/verify": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Verifies a user's email using a code sent to their email address.",
        "requestBody": {
          "description": "Contains the email and verification code.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/resend-verification": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Resends the email verification code to the specified email.",
        "requestBody": {
          "description": "Contains the email for resending the verification code.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendVerificationDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendVerificationDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResendVerificationDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/forgot-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Sends a password reset code to the specified email.",
        "requestBody": {
          "description": "Contains the email to send the reset code to.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Resets the user's password after verifying the reset code.",
        "requestBody": {
          "description": "Contains the email, reset code, and new password information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logs in the user and generates a JWT token for authentication.",
        "requestBody": {
          "description": "Contains the email and password for login.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/change-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Changes the user's password after validating the old password.",
        "requestBody": {
          "description": "Contains old and new passwords.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/profile": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Retrieves the profile of the currently logged-in user.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/update-profile": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Update the profile of user",
        "requestBody": {
          "description": "Contains infomation of user with role",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/upload-profile-image": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Upload image file",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout from system",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/account": {
      "delete": {
        "tags": [
          "Auth"
        ],
        "summary": "Delete user account based on id token",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Complaints": {
      "get": {
        "tags": [
          "Complaint"
        ],
        "summary": "Fetches all complaints.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of complaints."
          }
        }
      }
    },
    "/api/Complaint": {
      "post": {
        "tags": [
          "Complaint"
        ],
        "summary": "Creates a new complaint.",
        "requestBody": {
          "description": "Complaint object to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Complaint"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Complaint"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Complaint"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Returns the newly created complaint."
          },
          "400": {
            "description": "If the complaint data is invalid."
          }
        }
      }
    },
    "/api/Complaint/{id}": {
      "get": {
        "tags": [
          "Complaint"
        ],
        "summary": "Fetches a specific complaint by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the complaint.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the complaint details."
          },
          "404": {
            "description": "If the complaint is not found."
          }
        }
      }
    },
    "/api/Complaint/{complaintId}/process": {
      "post": {
        "tags": [
          "Complaint"
        ],
        "summary": "Processes a complaint by approving or rejecting it.",
        "parameters": [
          {
            "name": "complaintId",
            "in": "path",
            "description": "The ID of the complaint to process.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The action request containing the processing action (\"approve\" or \"reject\").",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComplaintActionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ComplaintActionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ComplaintActionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If the complaint has been successfully processed."
          },
          "400": {
            "description": "If the complaint has no valid contract, the action is invalid, or the complaint can't be processed."
          },
          "404": {
            "description": "If the complaint is not found."
          }
        }
      }
    },
    "/api/Contract/{id}": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Retrieves a contract by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the contract.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Contracts": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Get paginated list of all contracts",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Contracts/User": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Get paginated list of contracts by user ID",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Courses": {
      "get": {
        "tags": [
          "Course"
        ],
        "summary": "Retrieves all available courses.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Course"
        ],
        "summary": "Deletes multiple courses by their IDs.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Courses/tutor": {
      "get": {
        "tags": [
          "Course"
        ],
        "summary": "Retrieves courses by tutor ID.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Courses/student": {
      "get": {
        "tags": [
          "Course"
        ],
        "summary": "Get paginated list of students by user id",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Course/{id}": {
      "get": {
        "tags": [
          "Course"
        ],
        "summary": "Retrieves a course by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Course"
        ],
        "summary": "Updates an existing course by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Course"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Course"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Course"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Course": {
      "post": {
        "tags": [
          "Course"
        ],
        "summary": "Creates a new course.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CourseDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CourseDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CourseDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Course/{id}/cancel": {
      "post": {
        "tags": [
          "Course"
        ],
        "summary": "Cancels a course by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Course/{id}/students": {
      "get": {
        "tags": [
          "Course"
        ],
        "summary": "Retrieves all students enrolled in a course.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Enrollment/register": {
      "post": {
        "tags": [
          "Enrollments"
        ],
        "summary": "Registers a student for a course.",
        "requestBody": {
          "description": "The enrollment request course IDs.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrollmentRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrollmentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EnrollmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If registration is successful and contract is created.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the request is invalid, the student is ineligible, or there is a schedule conflict."
          },
          "404": {
            "description": "If the course does not exist."
          }
        }
      }
    },
    "/api/Enrollment/unenroll": {
      "delete": {
        "tags": [
          "Enrollments"
        ],
        "summary": "Canceling a registered course",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrollmentRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrollmentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EnrollmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Enrollment": {
      "get": {
        "tags": [
          "Enrollments"
        ],
        "summary": "Get enrollment information by id",
        "parameters": [
          {
            "name": "enrollmentId",
            "in": "query",
            "description": "Enrollment Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Student/feedback": {
      "post": {
        "tags": [
          "Feedbacks"
        ],
        "summary": "add a new user feedback",
        "requestBody": {
          "description": "Feedback information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Feedback"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Feedback"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Feedback"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Student/feedback/{feedbackId}": {
      "put": {
        "tags": [
          "Feedbacks"
        ],
        "summary": "Update user feedback",
        "parameters": [
          {
            "name": "feedbackId",
            "in": "path",
            "description": "Unique feedback id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Feedback information via feedback id",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Feedback"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Feedback"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Feedback"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Feedbacks"
        ],
        "summary": "Delete user feedback",
        "parameters": [
          {
            "name": "feedbackId",
            "in": "path",
            "description": "Unique feedback Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Feedbacks/tutors/{tutorId}": {
      "get": {
        "tags": [
          "Feedbacks"
        ],
        "summary": "Get list of user feedback with tutor by tutor id",
        "parameters": [
          {
            "name": "tutorId",
            "in": "path",
            "description": "Tutor Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Feedback/tutor/{tutorId}/user": {
      "get": {
        "tags": [
          "Feedbacks"
        ],
        "summary": "Get user feedback information with tutor via tutor id",
        "parameters": [
          {
            "name": "tutorId",
            "in": "path",
            "description": "Tutor ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Notifications": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Get a list of unread notifications",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Notifications/unread": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Get a list of unread notifications",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Notifications/read": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Get list of notifications that have been read",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Notification/mark-as-read/{id}": {
      "post": {
        "tags": [
          "Notification"
        ],
        "summary": "Mark a notification as read",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique notification id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Payment/enroll-and-pay": {
      "post": {
        "tags": [
          "Payment"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrollAndPayRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrollAndPayRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EnrollAndPayRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Payment/webhook": {
      "post": {
        "tags": [
          "Payment"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Payment/PaymentCallback": {
      "get": {
        "tags": [
          "Payment"
        ],
        "parameters": [
          {
            "name": "isBack",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Payment/billhistory": {
      "get": {
        "tags": [
          "Payment"
        ],
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BillHistoryDTOListPagedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillHistoryDTOListPagedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillHistoryDTOListPagedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Payment/confirm-payment": {
      "post": {
        "tags": [
          "Payment"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmPaymentRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmPaymentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmPaymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Schedule": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Retrieves all schedules.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleIEnumerableResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleIEnumerableResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleIEnumerableResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Schedule"
        ],
        "summary": "Creates a new schedule.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Schedule/{id}": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Retrieves a schedule by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Schedule"
        ],
        "summary": "Updates an existing schedule by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Schedules": {
      "delete": {
        "tags": [
          "Schedule"
        ],
        "summary": "Deletes multiple schedules based on their IDs.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Student/stats": {
      "get": {
        "tags": [
          "Student"
        ],
        "summary": "Get statistics based on student data",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Student/subjects": {
      "get": {
        "tags": [
          "Student"
        ],
        "summary": "Get subject statistics based on student data",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Student/courses": {
      "get": {
        "tags": [
          "Student"
        ],
        "summary": "Get courses statistics based on student data",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Student/tutors": {
      "get": {
        "tags": [
          "Student"
        ],
        "summary": "Get tutors statistics based on student data",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Student/stats/public": {
      "get": {
        "tags": [
          "Student"
        ],
        "summary": "Get statistics public based on system data",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Student/train": {
      "post": {
        "tags": [
          "Student"
        ],
        "summary": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Student/recommendations/tutors": {
      "get": {
        "tags": [
          "Student"
        ],
        "summary": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Tutors/search": {
      "get": {
        "tags": [
          "Tutors"
        ],
        "summary": "Search for tutors based on search criteria provided by the user.",
        "parameters": [
          {
            "name": "Subjects",
            "in": "query",
            "description": "Subjects the tutor should be able to teach.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Location",
            "in": "query",
            "description": "The location where the tutor should be available to teach (e.g., city or region).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TeachingMode",
            "in": "query",
            "description": "The mode of teaching preferred by the student.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MinFee",
            "in": "query",
            "description": "The minimum fee per session or per hour that the student is willing to pay.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "MaxFee",
            "in": "query",
            "description": "The maximum fee per session or per hour that the student is willing to pay.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "MinExperience",
            "in": "query",
            "description": "The minimum number of years of teaching experience the tutor should have.",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "MinRating",
            "in": "query",
            "description": "The minimum rating the tutor should have (on a scale of 1 to 5).",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list paginated of tutors matching the search criteria."
          },
          "404": {
            "description": "Returns if no tutor matches the search criteria."
          }
        }
      }
    },
    "/api/Tutors": {
      "get": {
        "tags": [
          "Tutors"
        ],
        "summary": "Get all tutors.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Tutor/{tutorId}": {
      "get": {
        "tags": [
          "Tutors"
        ],
        "summary": "Get tutor details by user ID.",
        "parameters": [
          {
            "name": "tutorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Tutor/dashboard": {
      "get": {
        "tags": [
          "Tutors"
        ],
        "summary": "Get statistics based on tutor data",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BillHistoryDTO": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "integer",
            "format": "int32"
          },
          "enrollmentId": {
            "type": "integer",
            "format": "int64"
          },
          "courseId": {
            "type": "integer",
            "format": "int32"
          },
          "courseName": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "paymentMethod": {
            "type": "string",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "vnPayResponseCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BillHistoryDTOListPagedResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillHistoryDTO"
            },
            "nullable": true
          },
          "succeeded": {
            "type": "boolean"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "firstPage": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "lastPage": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          },
          "nextPage": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordDTO": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          },
          "confirmNewPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Complaint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "contractId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "contract": {
            "$ref": "#/components/schemas/Contract"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false
      },
      "ComplaintActionRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfirmPaymentRequest": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Contract": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "tutorId": {
            "type": "integer",
            "format": "int32"
          },
          "studentId": {
            "type": "integer",
            "format": "int32"
          },
          "courseId": {
            "type": "integer",
            "format": "int32"
          },
          "terms": {
            "type": "string",
            "nullable": true
          },
          "fee": {
            "type": "number",
            "format": "double"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "tutor": {
            "$ref": "#/components/schemas/Tutor"
          },
          "student": {
            "$ref": "#/components/schemas/Student"
          },
          "course": {
            "$ref": "#/components/schemas/Course"
          },
          "complaints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Complaint"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Course": {
        "required": [
          "courseName",
          "description",
          "endDate",
          "fee",
          "maxStudents",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "tutorId": {
            "type": "integer",
            "format": "int32"
          },
          "courseName": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "fee": {
            "type": "number",
            "format": "double"
          },
          "maxStudents": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "tutor": {
            "$ref": "#/components/schemas/Tutor"
          },
          "enrollments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Enrollment"
            },
            "nullable": true
          },
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contract"
            },
            "nullable": true
          },
          "schedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Schedule"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CourseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "courseName": {
            "type": "string",
            "nullable": true
          },
          "tutorId": {
            "type": "integer",
            "format": "int32"
          },
          "enrollmentId": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "fee": {
            "type": "number",
            "format": "double"
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "maxStudents": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "tutorName": {
            "type": "string",
            "nullable": true
          },
          "schedule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EnrollAndPayRequest": {
        "type": "object",
        "properties": {
          "enrollmentId": {
            "type": "integer",
            "format": "int32"
          },
          "paymentMethod": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Enrollment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "studentId": {
            "type": "integer",
            "format": "int32"
          },
          "courseId": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "enrolledAt": {
            "type": "string",
            "format": "date-time"
          },
          "student": {
            "$ref": "#/components/schemas/Student"
          },
          "course": {
            "$ref": "#/components/schemas/Course"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EnrollmentRequest": {
        "type": "object",
        "properties": {
          "courseId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Feedback": {
        "required": [
          "comment"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "studentId": {
            "type": "integer",
            "format": "int32"
          },
          "tutorId": {
            "type": "integer",
            "format": "int32"
          },
          "rating": {
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "minLength": 1,
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "student": {
            "$ref": "#/components/schemas/Student"
          },
          "tutor": {
            "$ref": "#/components/schemas/Tutor"
          }
        },
        "additionalProperties": false
      },
      "ForgotPasswordRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImageRequest": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "twoFactorCode": {
            "type": "string",
            "nullable": true
          },
          "twoFactorRecoveryCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "sentAt": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "isRead": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ObjectResponse": {
        "type": "object",
        "properties": {
          "data": {
            "nullable": true
          },
          "succeeded": {
            "type": "boolean"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Payment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "enrollmentId": {
            "type": "integer",
            "format": "int64"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "paymentMethod": {
            "type": "string",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "vnPayResponseCode": {
            "type": "string",
            "nullable": true
          },
          "enrollment": {
            "$ref": "#/components/schemas/Enrollment"
          }
        },
        "additionalProperties": false
      },
      "ProfileDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "school": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "studentInfo": {
            "$ref": "#/components/schemas/StudentInfoDTO"
          },
          "tutorInfo": {
            "$ref": "#/components/schemas/TutorInfoDTO"
          }
        },
        "additionalProperties": false
      },
      "RegisterDTO": {
        "required": [
          "email",
          "name",
          "phone",
          "role"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string"
          },
          "phone": {
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "confirmPassword": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "minLength": 1,
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "school": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResendVerificationDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResetPasswordRequest": {
        "required": [
          "email",
          "newPassword",
          "resetCode"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "resetCode": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Schedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "tutorId": {
            "type": "integer",
            "format": "int32"
          },
          "courseId": {
            "type": "integer",
            "format": "int32"
          },
          "dayOfWeek": {
            "type": "integer",
            "format": "int32"
          },
          "startHour": {
            "type": "string",
            "format": "date-span"
          },
          "endHour": {
            "type": "string",
            "format": "date-span"
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "mode": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "tutor": {
            "$ref": "#/components/schemas/Tutor"
          },
          "course": {
            "$ref": "#/components/schemas/Course"
          }
        },
        "additionalProperties": false
      },
      "ScheduleDTO": {
        "required": [
          "courseId",
          "dayOfWeek",
          "endHour",
          "mode",
          "startHour",
          "tutorId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "tutorId": {
            "type": "integer",
            "format": "int32"
          },
          "courseId": {
            "type": "integer",
            "format": "int32"
          },
          "dayOfWeek": {
            "maximum": 7,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "startHour": {
            "type": "string",
            "format": "date-span"
          },
          "endHour": {
            "type": "string",
            "format": "date-span"
          },
          "mode": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string"
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScheduleIEnumerableResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Schedule"
            },
            "nullable": true
          },
          "succeeded": {
            "type": "boolean"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScheduleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Schedule"
          },
          "succeeded": {
            "type": "boolean"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StatDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "nullable": true
          },
          "succeeded": {
            "type": "boolean"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Student": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "class": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "enrollments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Enrollment"
            },
            "nullable": true
          },
          "feedbacks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feedback"
            },
            "nullable": true
          },
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contract"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StudentInfoDTO": {
        "type": "object",
        "properties": {
          "class": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Tutor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "experience": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "subjects": {
            "type": "string",
            "nullable": true
          },
          "introduction": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "type": "number",
            "format": "float"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Course"
            },
            "nullable": true
          },
          "feedbacks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feedback"
            },
            "nullable": true
          },
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contract"
            },
            "nullable": true
          },
          "schedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Schedule"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TutorInfoDTO": {
        "type": "object",
        "properties": {
          "experience": {
            "type": "number",
            "format": "float"
          },
          "subjects": {
            "type": "string",
            "nullable": true
          },
          "introduction": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "User": {
        "required": [
          "email",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "phone": {
            "maxLength": 10,
            "type": "string",
            "format": "tel",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "profileImage": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "school": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "verified": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "complaints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Complaint"
            },
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VerifyEmailDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Enter 'Bearer [token]'.",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}